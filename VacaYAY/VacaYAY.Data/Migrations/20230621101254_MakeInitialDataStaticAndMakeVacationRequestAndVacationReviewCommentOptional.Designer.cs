// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VacaYAY.Data;

#nullable disable

namespace VacaYAY.Data.Migrations
{
    [DbContext(typeof(VacayayDbContext))]
    [Migration("20230621101254_MakeInitialDataStaticAndMakeVacationRequestAndVacationReviewCommentOptional")]
    partial class MakeInitialDataStaticAndMakeVacationRequestAndVacationReviewCommentOptional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a94fb548-dc92-4f3f-872b-3bca02114ea8",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = "76bc4d5c-00ea-48bd-a9b4-fef0d30e4e23",
                            Name = "Default",
                            NormalizedName = "Default"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "000f4869-1f3a-4d63-a92d-6fa8753aa353",
                            RoleId = "a94fb548-dc92-4f3f-872b-3bca02114ea8"
                        },
                        new
                        {
                            UserId = "19eadb6f-7ed7-4acd-9bf4-26825f5619a7",
                            RoleId = "76bc4d5c-00ea-48bd-a9b4-fef0d30e4e23"
                        },
                        new
                        {
                            UserId = "aac218f6-96c4-47c0-b231-310b7f7f6a85",
                            RoleId = "76bc4d5c-00ea-48bd-a9b4-fef0d30e4e23"
                        },
                        new
                        {
                            UserId = "38f4bcd5-eab1-45a7-9929-2fb8550dbe57",
                            RoleId = "76bc4d5c-00ea-48bd-a9b4-fef0d30e4e23"
                        },
                        new
                        {
                            UserId = "069fe119-c139-4d6f-a4d5-0bc90540339f",
                            RoleId = "76bc4d5c-00ea-48bd-a9b4-fef0d30e4e23"
                        },
                        new
                        {
                            UserId = "24105a5d-752a-4f0d-b992-787388f159bf",
                            RoleId = "76bc4d5c-00ea-48bd-a9b4-fef0d30e4e23"
                        },
                        new
                        {
                            UserId = "335ef315-05f4-4d87-a678-05ec02de608f",
                            RoleId = "76bc4d5c-00ea-48bd-a9b4-fef0d30e4e23"
                        },
                        new
                        {
                            UserId = "cc89ca61-a1bf-42a0-b4b6-a2c548ffb6a6",
                            RoleId = "76bc4d5c-00ea-48bd-a9b4-fef0d30e4e23"
                        },
                        new
                        {
                            UserId = "ca0a5ad3-689c-4915-8261-01a67889e664",
                            RoleId = "76bc4d5c-00ea-48bd-a9b4-fef0d30e4e23"
                        },
                        new
                        {
                            UserId = "3e21a209-9d4c-44e3-8e97-f7ed042c9c56",
                            RoleId = "76bc4d5c-00ea-48bd-a9b4-fef0d30e4e23"
                        },
                        new
                        {
                            UserId = "2f409517-b274-44ea-9380-c57fff02871d",
                            RoleId = "76bc4d5c-00ea-48bd-a9b4-fef0d30e4e23"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VacaYAY.Data.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DaysOffNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmploymentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EmploymentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdNumber")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PositionId");

                    b.HasIndex("FirstName", "LastName", "EmploymentStartDate", "EmploymentEndDate");

                    b.ToTable("Employees", null, t =>
                        {
                            t.HasCheckConstraint("CK_Employees_DaysOffNumber_Range", "[DaysOffNumber] >= 0 AND [DaysOffNumber] <= 2147483647");
                        });

                    b.HasData(
                        new
                        {
                            Id = "000f4869-1f3a-4d63-a92d-6fa8753aa353",
                            AccessFailedCount = 0,
                            Address = "Vodo Elektro 13",
                            DaysOffNumber = 20,
                            Email = "admin@outlook.com",
                            EmailConfirmed = true,
                            EmploymentEndDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentStartDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Administrator",
                            IdNumber = "12345",
                            InsertDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Outlook",
                            LockoutEnabled = true,
                            NormalizedEmail = "admin@outlook.com",
                            NormalizedUserName = "admin@outlook.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELBhGKQIekty8VzCyPnzBK8uFvx5mqUY+L0LNJ0fi616XYT/nVK9DfbIFFIotkyoHQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 1,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@outlook.com"
                        },
                        new
                        {
                            Id = "19eadb6f-7ed7-4acd-9bf4-26825f5619a7",
                            AccessFailedCount = 0,
                            Address = "Svetog Patrijarlimpija 12",
                            DaysOffNumber = 20,
                            Email = "andrija.tosic@ingsoftware.com",
                            EmailConfirmed = true,
                            EmploymentEndDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentStartDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Andrija",
                            IdNumber = "10000",
                            InsertDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Tošić",
                            LockoutEnabled = true,
                            NormalizedEmail = "andrija.tosic@ingsoftware.com",
                            NormalizedUserName = "andrija.tosic@ingsoftware.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELBhGKQIekty8VzCyPnzBK8uFvx5mqUY+L0LNJ0fi616XYT/nVK9DfbIFFIotkyoHQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "andrija.tosic@ingsoftware.com"
                        },
                        new
                        {
                            Id = "aac218f6-96c4-47c0-b231-310b7f7f6a85",
                            AccessFailedCount = 0,
                            Address = "Dino Mustafić 8",
                            DaysOffNumber = 20,
                            Email = "papak.potočar@gmail.com",
                            EmailConfirmed = true,
                            EmploymentEndDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentStartDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Papak",
                            IdNumber = "10001",
                            InsertDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Potočar",
                            LockoutEnabled = true,
                            NormalizedEmail = "papak.potočar@gmail.com",
                            NormalizedUserName = "papak.potočar@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELBhGKQIekty8VzCyPnzBK8uFvx5mqUY+L0LNJ0fi616XYT/nVK9DfbIFFIotkyoHQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "papak.potočar@gmail.com"
                        },
                        new
                        {
                            Id = "38f4bcd5-eab1-45a7-9929-2fb8550dbe57",
                            AccessFailedCount = 0,
                            Address = "S.T.R. Gugleta",
                            DaysOffNumber = 20,
                            Email = "katrafilov.f@gmail.com",
                            EmailConfirmed = true,
                            EmploymentEndDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentStartDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Katrafilov",
                            IdNumber = "10002",
                            InsertDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "F",
                            LockoutEnabled = true,
                            NormalizedEmail = "katrafilov.f@gmail.com",
                            NormalizedUserName = "katrafilov.f@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELBhGKQIekty8VzCyPnzBK8uFvx5mqUY+L0LNJ0fi616XYT/nVK9DfbIFFIotkyoHQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 3,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "katrafilov.f@gmail.com"
                        },
                        new
                        {
                            Id = "069fe119-c139-4d6f-a4d5-0bc90540339f",
                            AccessFailedCount = 0,
                            Address = "Željka Radeljića Škoda Roomster",
                            DaysOffNumber = 20,
                            Email = "jagan.drankovic@gmail.com",
                            EmailConfirmed = true,
                            EmploymentEndDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentStartDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jagan",
                            IdNumber = "10003",
                            InsertDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Dranković",
                            LockoutEnabled = true,
                            NormalizedEmail = "jagan.drankovic@gmail.com",
                            NormalizedUserName = "jagan.drankovic@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELBhGKQIekty8VzCyPnzBK8uFvx5mqUY+L0LNJ0fi616XYT/nVK9DfbIFFIotkyoHQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 2,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "jagan.drankovic@gmail.com"
                        },
                        new
                        {
                            Id = "24105a5d-752a-4f0d-b992-787388f159bf",
                            AccessFailedCount = 0,
                            Address = "Derek Kentford Ave",
                            DaysOffNumber = 20,
                            Email = "menza.projic@gmail.com",
                            EmailConfirmed = true,
                            EmploymentEndDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentStartDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Menza",
                            IdNumber = "10004",
                            InsertDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Projić",
                            LockoutEnabled = true,
                            NormalizedEmail = "menza.projic@gmail.com",
                            NormalizedUserName = "menza.projic@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELBhGKQIekty8VzCyPnzBK8uFvx5mqUY+L0LNJ0fi616XYT/nVK9DfbIFFIotkyoHQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "menza.projic@gmail.com"
                        },
                        new
                        {
                            Id = "335ef315-05f4-4d87-a678-05ec02de608f",
                            AccessFailedCount = 0,
                            Address = "Dylan McKenzie St.",
                            DaysOffNumber = 20,
                            Email = "goran.los.andjeles@gmail.com",
                            EmailConfirmed = true,
                            EmploymentEndDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentStartDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Goran",
                            IdNumber = "10005",
                            InsertDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Los Anđeles",
                            LockoutEnabled = true,
                            NormalizedEmail = "goran.los.andjeles@gmail.com",
                            NormalizedUserName = "goran.los.andjeles@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELBhGKQIekty8VzCyPnzBK8uFvx5mqUY+L0LNJ0fi616XYT/nVK9DfbIFFIotkyoHQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "goran.los.andjeles@gmail.com"
                        },
                        new
                        {
                            Id = "cc89ca61-a1bf-42a0-b4b6-a2c548ffb6a6",
                            AccessFailedCount = 0,
                            Address = "Sokače \"Sv. Trifutin\"",
                            DaysOffNumber = 20,
                            Email = "milka.ladovinka@gmail.com",
                            EmailConfirmed = true,
                            EmploymentEndDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentStartDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Milka",
                            IdNumber = "10006",
                            InsertDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Ladovinka",
                            LockoutEnabled = true,
                            NormalizedEmail = "milka.ladovinka@gmail.com",
                            NormalizedUserName = "milka.ladovinka@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELBhGKQIekty8VzCyPnzBK8uFvx5mqUY+L0LNJ0fi616XYT/nVK9DfbIFFIotkyoHQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 2,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "milka.ladovinka@gmail.com"
                        },
                        new
                        {
                            Id = "ca0a5ad3-689c-4915-8261-01a67889e664",
                            AccessFailedCount = 0,
                            Address = "Ispod mosta, Zenica",
                            DaysOffNumber = 20,
                            Email = "mustafa.hrustic@gmail.com",
                            EmailConfirmed = true,
                            EmploymentEndDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentStartDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mustafa",
                            IdNumber = "10007",
                            InsertDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Hrustić",
                            LockoutEnabled = true,
                            NormalizedEmail = "mustafa.hrustic@gmail.com",
                            NormalizedUserName = "mustafa.hrustic@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELBhGKQIekty8VzCyPnzBK8uFvx5mqUY+L0LNJ0fi616XYT/nVK9DfbIFFIotkyoHQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 3,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mustafa.hrustic@gmail.com"
                        },
                        new
                        {
                            Id = "3e21a209-9d4c-44e3-8e97-f7ed042c9c56",
                            AccessFailedCount = 0,
                            Address = "Bogoljuba Bradostanojevića",
                            DaysOffNumber = 20,
                            Email = "boban.gasev@gmail.com",
                            EmailConfirmed = true,
                            EmploymentEndDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentStartDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Boban",
                            IdNumber = "10008",
                            InsertDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Gasev",
                            LockoutEnabled = true,
                            NormalizedEmail = "boban.gasev@gmail.com",
                            NormalizedUserName = "boban.gasev@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELBhGKQIekty8VzCyPnzBK8uFvx5mqUY+L0LNJ0fi616XYT/nVK9DfbIFFIotkyoHQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "boban.gasev@gmail.com"
                        },
                        new
                        {
                            Id = "2f409517-b274-44ea-9380-c57fff02871d",
                            AccessFailedCount = 0,
                            Address = "Patrijarha Veropojlija",
                            DaysOffNumber = 20,
                            Email = "erl.znojsulja@gmail.com",
                            EmailConfirmed = true,
                            EmploymentEndDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentStartDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Erl",
                            IdNumber = "10009",
                            InsertDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Znojšulja",
                            LockoutEnabled = true,
                            NormalizedEmail = "erl.znojsulja@gmail.com",
                            NormalizedUserName = "erl.znojsulja@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELBhGKQIekty8VzCyPnzBK8uFvx5mqUY+L0LNJ0fi616XYT/nVK9DfbIFFIotkyoHQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "erl.znojsulja@gmail.com"
                        });
                });

            modelBuilder.Entity("VacaYAY.Data.Models.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LeaveTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Days off"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sick leave"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Paid leave"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Unpaid leave"
                        });
                });

            modelBuilder.Entity("VacaYAY.Data.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Caption = "HR",
                            Description = "Human Resources"
                        },
                        new
                        {
                            Id = 2,
                            Caption = "iOS Developer",
                            Description = "Apple user"
                        },
                        new
                        {
                            Id = 3,
                            Caption = "Android Developer",
                            Description = "Android user"
                        },
                        new
                        {
                            Id = 4,
                            Caption = "MVC Intern",
                            Description = "Lizard"
                        },
                        new
                        {
                            Id = 5,
                            Caption = "Java Intern",
                            Description = "Also lizard"
                        });
                });

            modelBuilder.Entity("VacaYAY.Data.Models.VacationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("VacationRequests");
                });

            modelBuilder.Entity("VacaYAY.Data.Models.VacationReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VacationRequestRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("VacationRequestRefId")
                        .IsUnique();

                    b.ToTable("VacationReviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VacaYAY.Data.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VacaYAY.Data.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacaYAY.Data.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VacaYAY.Data.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VacaYAY.Data.Models.Employee", b =>
                {
                    b.HasOne("VacaYAY.Data.Models.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("VacaYAY.Data.Models.VacationRequest", b =>
                {
                    b.HasOne("VacaYAY.Data.Models.Employee", "Employee")
                        .WithMany("VacationRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacaYAY.Data.Models.LeaveType", "LeaveType")
                        .WithMany("VacationRequests")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("VacaYAY.Data.Models.VacationReview", b =>
                {
                    b.HasOne("VacaYAY.Data.Models.Employee", null)
                        .WithMany("VacationReviews")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("VacaYAY.Data.Models.Employee", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VacaYAY.Data.Models.VacationRequest", "VacationRequest")
                        .WithOne("VacationReview")
                        .HasForeignKey("VacaYAY.Data.Models.VacationReview", "VacationRequestRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("VacationRequest");
                });

            modelBuilder.Entity("VacaYAY.Data.Models.Employee", b =>
                {
                    b.Navigation("VacationRequests");

                    b.Navigation("VacationReviews");
                });

            modelBuilder.Entity("VacaYAY.Data.Models.LeaveType", b =>
                {
                    b.Navigation("VacationRequests");
                });

            modelBuilder.Entity("VacaYAY.Data.Models.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("VacaYAY.Data.Models.VacationRequest", b =>
                {
                    b.Navigation("VacationReview");
                });
#pragma warning restore 612, 618
        }
    }
}
